---
import Particles from "astro-particles";
import type { ISourceOptions } from "tsparticles-engine";

const options: ISourceOptions = {
  particles: {
    fpsLimit: 120,

    number: {
      value: 60,
      density: {
        enable: true,
        area: 800,
      },
    },
    color: {
      value: "#997788",
    },
    links: {
      enable: true,
      color: "#997788",
      distance: 150,
      opacity: 0.2,
      width: 1,
    },
    shape: {
      type: "circle",
      stroke: {
        width: 3,
        opacity: 0.3,
      },
    },
    opacity: {
      value: 0.2,
      random: false,
      anim: {
        enable: true,
        speed: 1,
        opacity_min: 0.1,
        sync: false,
      },
    },
    size: {
      value: 3,
      random: true,
    },

    move: {
      direction: "none",
      enable: true,
      outModes: {
        default: "bounce",
      },
      random: false,
      speed: 0.15,
      straight: false,
    },
    collisions: {
      enable: true,
    },
  },
  interactivity: {
    events: {
      onhover: {
        enable: true,
        mode: "repulse",
      },
      onclick: {
        enable: true,
        mode: "repulse",
      },
      resize: true,
    },
    modes: {
      push: {
        quantity: 5,
      },
      repulse: {
        distance: 200,
        duration: 0.4,
      },
    },
  },
  retina_detect: true,
  fullScreen: true,
};
---

<script>
  import { type Container, type Engine } from "tsparticles-engine";
  import { loadFull } from "tsparticles";

  declare global {
    interface Window {
      particlesInit: (engine: Engine) => Promise<void>;
      particlesLoaded: (container: Container) => void;
    }
  }

  window.particlesInit = async function (engine: Engine) {
    await loadFull(engine as any);
  };

  window.particlesLoaded = function (container: Container) {
    console.log("particlesLoaded callback");
  };
</script>

<Particles
  id="tsparticles"
  options={options}
  init="particlesInit"
  loaded="particlesLoaded"
/>
